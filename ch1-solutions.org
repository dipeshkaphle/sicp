#+title: SICP Solutions

#+NAME: assert
#+BEGIN_SRC racket :lang racket
(define-syntax-rule (assert_eq? l r)
(when (not (eq? l r)) (printf "~a != ~a" (quote l ) (quote r ))))
#+END_SRC

#+RESULTS: assert

#+BEGIN_SRC racket :lang racket :session scratchpad
(define (square x) (* x x))
(square 2)
#+END_SRC

#+RESULTS:
: 4

* Building Abstractions with Procedures

*** 1.1
#+BEGIN_SRC racket :lang racket :noweb eval
<<assert>>
(assert_eq? (+ 5 3 4) 12)
(assert_eq? (- 9 1) 8)
(assert_eq? ( / 6 2 ) 3)
(assert_eq? 6 (+ (* 2 4) (- 4 6) ) )
(define a 3)
(define b (+ a 1))

(assert_eq? 19 (+ a b (* a b)))

(assert_eq? #f (= a b))

(assert_eq? b (if (and (> b a) (< b (* a b)))
b
a))

(assert_eq? 16 (cond ((= a 4) 6)
((= b 4) (+ 6 7 a))
(else 25)) )
(assert_eq? 6 (+ 2 (if (> b a) b a) ))
(assert_eq? 16 (* (cond ((> a b) a)
((< a b) b)
(else -1))
(+ a 1)) )

#+END_SRC

#+RESULTS:

*** 1.2

#+BEGIN_SRC racket :lang racket
(/ (+ 5 4 (-  2 (- 3 (+ 6 (/ 4 5)))))
(* 3 (- 6 2) (- 2 7)))
#+END_SRC

*** 1.3
#+BEGIN_SRC racket :lang racket :noweb eval
<<assert>>
(define (square x) (* x x))
(define ( sum-of-sq a b ) (+ (square a) (square b)))
(define (f a b c)
(cond ((and (< a b) (< a c)) (sum-of-sq b c) )
        ((and (< b a) (< b c)) (sum-of-sq a c) )
        (else (sum-of-sq a b))
)
)
(assert_eq? (f 1 2 3) 13)
(assert_eq? (f 2 2 1) 8)
#+END_SRC

#+RESULTS:

*** 1.4

#+BEGIN_SRC racket :lang racket :noweb eval
<<assert>>
(define (a-plus-abs-b a b)
((if (> b 0) + -) a b))
(assert_eq? (a-plus-abs-b 1 (- 2)) 3)
(assert_eq? (a-plus-abs-b 1 2) 3)
#+END_SRC

#+RESULTS:

*** 1.5

#+BEGIN_SRC racket :lang racket :noweb eval
(define (p) (p))
(define (test x y)
    (if (= x 0) 0 y))
;; Evaluate this for normal and applicative order (test 0 (p))
;; Normal order will not evaluate p because
;; that branch isn't taken
;; Applicative order will evaluate p, so it ends up
;; recursing over itself and will probably eventually
;; crash
#+END_SRC


*** 1.6

#+NAME: sqrt
#+BEGIN_SRC racket :lang racket
(define ( square  x) (* x x))

;; Newton's method for sqrt
(define ( average x y ) (/ (+ x y) 2))

(define (improve guess x)
  (average guess (/ x guess)))

(define (good-enough? guess x)
   (< (abs (- (square guess) x)) 0.001)
)

(define (sqrt-iter guess x)
  (if (good-enough? guess x) guess
      (sqrt-iter (improve guess x) x))
)

(define (sqrt x) (sqrt-iter 1.0 x))
(sqrt 0.0004) ;; bad approximation
(sqrt 4)
(sqrt 0.01)

#+END_SRC

#+RESULTS: sqrt
: 0.0354008825558513
: 2.0000000929222947
: 0.10032578510960605

#+BEGIN_SRC racket :lang racket :noweb eval
<<sqrt>>
(define (new-if predicate then-clause else-clause)
    (cond (predicate then-clause)
    (else else-clause)))
(define (sqrt-iter' guess x)
   (new-if (good-enough? guess x)
      guess
      (sqrt-iter' (improve guess x) x)
   )
)
#+END_SRC

#+RESULTS:

The issue with ~sqrt-iter'~ is:

+ The moment we call it, it'll also evaluate the else-clause,
  which makes it recur forever. This makes sense why you can't
  write if as special case of ~cond~. I also did think it would
  work but well i guess not. Super nice example. I should think
  evaluation in ~applicative order~. This would've worked if things
  were evaluated in ~normal order~.

*** 1.7

It is giving much better result for some cases,so I'm hoping it's
better in general too.

#+BEGIN_SRC racket :lang racket :noweb eval
;; Different strategy for good-enough?
(define ( square  x) (* x x))
(define ( average x y ) (/ (+ x y) 2))

(define (improve guess x)
  (average guess (/ x guess)))


(define (good-enough?? prev-guess cur-guess x)
   (and (< (/ (- prev-guess cur-guess) cur-guess) 0.001)
        (< (abs (- (square x) cur-guess)) 0.001)
        )
)

(define (sqrt-iter2 prev-guess guess x)
  (if (good-enough?? prev-guess guess x) guess
      (sqrt-iter2 guess (improve guess x) x))
)

(define (sqrt2 x) (sqrt-iter2 2.0 1.0 x))
(sqrt 0.0004)
(sqrt 4)
(sqrt 0.01) ;; Much better approx
#+END_SRC

#+RESULTS:
: 0.02
: 2
: 0.1


*** 1.8

Implement cube root, approximation function would be
\(\frac{\frac{x}{y^2} + 2y}{3}\)


#+NAME: cube-root
#+BEGIN_SRC racket :lang racket

(define (cube x) (* x x x))
(define (square x) (* x x))

;; Cube root

(define (improve guess x)
  (/ (+ (/ x (square guess)) (* 2.0 guess)) 3.0))

(define (good-enough? guess x)
   (< (abs (- (cube guess) x)) 0.001)
)

(define (cube-root-iter guess x)
  (if (good-enough? guess x) guess
      (cube-root-iter (improve guess x) x))
)

(define (cube-root x) (cube-root-iter 1.0 x))
(displayln (cube-root 8.0))
(displayln (cube-root 0.001) )
#+END_SRC

#+RESULTS: cube-root

*** 1.9

#+BEGIN_SRC racket :lang racket :noweb eval
(define (inc x) (+ x 1))
(define (dec x) (- x 1))
(define (+ a b) ;; proc1
  (if (= a 0) b (inc (+ (dec a ) b))))
(define (+ a b) ;; proc2
  (if (= a 0) b (+ (dec a) (inc b))))
#+END_SRC

For evaluating ~(+ 4 5)~, we will have the following call stack.

*proc1*: Recursive process

#+BEGIN_SRC racket :lang racket
(+ 5 4)
(inc (+ 4 4))
(inc (inc (+ 3 4)))
(inc (inc (inc (+ 2 4))))
(inc (inc (inc (inc (+ 1 4)))))
(inc (inc (inc (inc (inc (+ 0 4))))))
(inc (inc (inc (inc (inc 4)))))
(inc (inc (inc (inc 5))))
(inc (inc (inc 6)))
(inc (inc 7))
(inc 8)
9
#+END_SRC

*proc2*: iterative process

#+BEGIN_SRC racket :lang racket
(+ 5 4)
(+ 4 5)
(+ 3 6)
(+ 2 7)
(+ 1 8)
(+ 0 9)
9
#+END_SRC

*** 1.10

#+BEGIN_SRC racket :lang racket :noweb eval
<<assert>>
(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1) (A x (- y 1))))))

(define (f n) (A 0 n))
(define (g n) (A 1 n))
(define (h n) (A 2 n))
(define (k n) (* 5 n n))

(assert_eq? (A 1 10) 1024)
(assert_eq? (A 2 4) 65536)
(assert_eq? (A 3 3) 65536)
;; (A 3 3)
;; (A 2 (A 3 2))
;; (A 2 (A 2 (A 3 1)))
;; (A 2 (A 2 2))
;; (A 2 4)
;; (A 2 4)
#+END_SRC

#+RESULTS:

+ ~(f n)~ computes $2n$.

+ ~(g n)~
#+BEGIN_SRC racket :lang racket
(g n)
(A 1 n)
(A 0 (A 1 (- n 1)))
(* 2 (A 1 (- n 1)))
(* 2 (A 0 (A 1 (- n 2))))
(* 2 (* 2 (A 1 (- n 2))))
#+END_SRC

Seeing the pattern it's computing $2^n\ if\ n>0\ else,\ 0$

+ ~(h n)~

#+BEGIN_SRC racket :lang racket
(h n)
(A 2 n)
(A 1 (A 2 (- n 1)))
(g (A 2 (-n 1)))
(g (A 1 (A 2 (- n 2))))
(g (g (A 2 (- n 2))))
;; ends up being (g (g (g (g .. (g 2))))) after n- 1  evaluations

;; For n=2
;; (g (A 2 1))
;; (g (A 2 1))
;; (g 2)
;; 4

;; For n=3
;; (g (A 2 2))
;; (g (g (A 2 1)))
;; (g (g 2))
;; (g 4)
;; 16

#+END_SRC

So ~(h n)~ will basically be 2^{h(n-1)} $if\ n>0,\ else\ 0$

+ ~(g n)~ is $5n^2$

*** 1.11

#+BEGIN_SRC racket :lang racket :noweb eval
<<assert>>
(define (fib n)
  (cond ((= n 0) 0)
        ((= n 1) 1)
        (else (+ (fib (- n 1))
                 (fib (- n 2))))))

(define (f-rec n)
  (if (< n 3)
      n
      (+ (f-rec (- n 1))
         (* 2 (f-rec (- n 2)))
         (* 3 (f-rec (- n 3)))
         )))
(define (f-iter n)
    (define (f a b c m)
      (if (= n m)
          (+ a (* 2 b) (* 3 c))
          (f (+ a (* 2 b) (* 3 c)) a b (+ m 1))))
    (if (< n 3)
        n
        (f 2 1 0 3))
    )

(assert_eq? (f-rec 2) (f-iter 2))
(assert_eq? (f-rec 3) (f-iter 3))
(assert_eq? (f-rec 4) (f-iter 4))
(assert_eq? (f-rec 5) (f-iter 5))
#+END_SRC

#+RESULTS:

*TIL*: No. of leaves in tree generated for ~fib(n)~ computation is ~fib(n+1)~.

*** 1.12

#+BEGIN_SRC racket :lang racket :noweb eval
(define (pascal r c)
    (cond
      ((or (< r 0) (< c 0)) 0)
      ((and (= r 0) (= c 0)) 1)
      (else (+ (pascal (- r 1) c) (pascal (- r 1) (- c 1))))
      )
    )
(displayln (pascal 0 0))
(displayln (pascal 2 1))
#+END_SRC

#+RESULTS:
: 1

*** 1.13

*NOTE*: proof of approximation with help from a friend who still remembered the proof.

Let ~fib(n)~ be approximated by ~x~. Then,

$$
fib(n+2) = fib(n+1) + fib (n)
$$

$$
x^{n+2} = x^{n+1} + x^n
$$

$$
x^2 - x - 1 = 0
$$

The roots to the above equation are:

$$
\psi = \frac{1 - \sqrt{5}}{2}
$$

$$
\phi = \frac{1 + \sqrt{5}}{2}
$$

*NOW ACTUAL PROOF*

Yeah, I can't do this right now.(Will try later)

*** 1.14

#+BEGIN_SRC racket :lang racket
(define (count-change amount) (cc amount 5))
(define (cc amount kinds-of-coins)
    (cond ((= amount 0) 1)
        ((or (< amount 0) (= kinds-of-coins 0)) 0)
        (else (+ (cc amount
                    (- kinds-of-coins 1))
        (cc (- amount
                (first-denomination
                kinds-of-coins))
            kinds-of-coins)))))
(define (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
        ((= kinds-of-coins 2) 5)
        ((= kinds-of-coins 3) 10)
        ((= kinds-of-coins 4) 25)
        ((= kinds-of-coins 5) 50)))
;; (count-change 11)
;; (cc 11 5)
;; (+ (cc 11 4) (cc (- 11 (first-denomination 5)) 5))
;; (+ (cc 11 4) (cc (- 11 50) 4))
;; (+ (cc 11 4) 0)
;; (+ (cc 11 3) (cc (- 11 (first-denomination 4)) 4))
;; (+ (cc 11 3) (cc (- 11 25) 4))
;; (+ (cc 11 3) 0 )
;; (+ (cc 11 2) (cc (- 11 (first-denomination 3)) 3))
;; (+ (cc 11 2) (cc (- 11 10) 3))
;; (+ (cc 11 2) (cc 1 3))
;; (+ (cc 11 2) (+ (cc 1 2) (cc (- 1 (first-denomination 3)) 3)))
;; (+ (cc 11 2) (+ (cc 1 2) (cc (- 1 10) 3)))
;; (+ (cc 11 2) (+ (cc 1 2) 0))
;; (+ (cc 11 2) (+ (cc 1 1) (cc (- 1 (first-denomination 2)) 2)))
;; (+ (cc 11 2) (+ (cc 1 1) 0))
;; (+ (cc 11 2) (+ (cc 1 0) (cc (- 1 (first-denomination 1)) 1)))
;; (+ (cc 11 2) (+ (cc 1 0) (cc 0 1)))
;; (+ (cc 11 2) (+ (cc 1 0) 1))
;; (+ (cc 11 2) (+ 0 1))
;; (+ (cc 11 2) 1)
;; (+ (+ (cc 11 1) (cc (- 11 (first-denomination 2)) 2)) 1)
;; (+ (+ (cc 11 1) (cc (- 11 (first-denomination 2)) 2)) 1)
;; (+ (+ (cc 11 1) (cc (- 11 10) 2)) 1)
;; (+ (+ (cc 11 1) (cc 1 2)) 1)
;; (+ (+ (cc 11 1) (cc 1 2)) 1) ;; (cc 1 2) evaluates to 2, i don't want to type it again
;; (+ (+ (cc 11 1) 1) 1) ;; (cc 1 2) evaluates to 2, i don't want to type it again
;; (+ (+ (+ (cc 11 0) (cc (- 11 (first-denomination 1)) 1)) 1) 1) ;; (cc 1 2) evaluates to 2, i don't want to type it again
;; (+ (+ (+ (cc 11 0) (cc (- 11 1) 1)) 1) 1)
;; (+ (+ (+ (cc 11 0) (cc 10 1)) 1) 1)
;; (+ (+ (+ (cc 11 0) (cc 10 1)) 1) 1)
;; (+ (+ (+ (cc 11 0) (+ (cc 10 0) (cc (- 10 (first-denomination 1)) 1))) 1) 1)
;; (+ (+ (+ (cc 11 0) (+ (cc 10 0) (cc (- 10 1) 1))) 1) 1)
;; (+ (+ (+ (cc 11 0) (+ (cc 10 0) (cc 9 1))) 1) 1)
;; (+ (+ (+ (cc 11 0) (+ (cc 10 0) (cc 9 1))) 1) 1)
;; (+ (+ (+ 0 (+ 0 (cc 9 1))) 1) 1)
;; (+ (cc 9 1) 1 1)
;; (+ (+ (cc 9 0) (cc (- 9 (first-denomination 1)) 1)) 1 1)
;; (+ (+ 0 (cc (- 9 1) 1)) 1 1)
;; (+ (cc 8 1) 1 1)
;; (+ (cc 7 1) 1 1)
;; (+ (cc 6 1) 1 1)
;; (+ (cc 5 1) 1 1)
;; (+ (cc 4 1) 1 1)
;; (+ (cc 3 1) 1 1)
;; (+ (cc 2 1) 1 1)
;; (+ (cc 1 1) 1 1)
;; (+ (+ (cc 0 1) (cc (- 1 (first-denomination 1)) 1)) 1 1)
;; (+ (+ 1 (cc (- 1 1) 1)) 1 1)
;; (+ (+ 1 (cc 0 1)) 1 1)
;; (+ (+ 1 1) 1 1)
;; (+ 2 1 1)
;; 4
(displayln (count-change 11))
#+END_SRC

#+RESULTS:
: 4

+ The space grows linearly. I believe it can have O(n)
  stack size. In terms of time, it's exponential, since at each point you kind
  of have two things you do. Use the current
  thing or don't use it.

*** 1.15

#+BEGIN_SRC racket :lang racket
(define (cube x) (* x x x))
(define (p x) (- (* 3 x) (* 4 (cube x))))
(define (sine angle)
  (if (not (> (abs angle) 0.1))
      angle
      (p (sine (/ angle 3.0)))))
;; (sine 12.15)
;; (p (sine 4.05))
;; (p (p (sine 1.35)))
;; (p (p (p (sine 0.45))))
;; (p (p (p (p (sine 0.15)))))
;; (p (p (p (p (p (sine 0.05))))))
;; (p (p (p (p (p 0.05)))))
#+END_SRC

+ ~p~ is evaluated 5 times
+ In evaluation of ~(sine a)~, the space is ~O(loga)~ and so is time. The space is used for recursion(i.e mainly for
  evaluating procedure ~p~).

  $$
  \frac{a}{3.0^n} <= 0.1
  $$

  $$
  \frac{a}{0.1} <=  3.0^n
  $$

  $$
  log_3(\frac{a}{0.1}) <= log_3(3.0^n)
  $$

  $$
  n >= log_3(\frac{a}{0.1})
  $$

~n~ is the number of time we'd need to call ~p~ to evaluate ~(sine a)~. For ~a=12.15~, we get ~n>=4.37~, so we'd evaluate p ~5~ times.

*** 1.16

I can't believe this took me so long.
#+BEGIN_SRC racket :lang racket
;; Recursive fast exponentiation
(define (even? n)
  (= (remainder n 2) 0))

(define (fast-expt b n)
  (cond ((= n 0) 1)
        ((even? n) (square (fast-expt b (/ n 2))))
        (else (* b (fast-expt b (- n 1))))))
;; Iterative exponentiation using successive squaring
;; maintain ab^n (let a = acc)
;; if n is even, b<- b^2 , n <- n/2
;; if n is odd, a <- a*b , n <- n-1

(define (fast-exp-iter b n acc)
    (cond ((= n 0) acc)
          ((even? n) (fast-exp-iter (* b b) (arithmetic-shift n -1) acc))
          (else (fast-exp-iter b (- n 1) (* acc b)))
          )
    )
#+END_SRC

#+RESULTS:

*** 1.17 & 1.18

#+BEGIN_SRC racket :lang racket :noweb eval
<<assert>>
;; (define (* a b)
;;     (if (= b 0)
;;         0
;;         (+ a (* a (- b 1)))))
(define (halve x)
  (arithmetic-shift x -1))
(define (double x)
  (arithmetic-shift x 1))
(define (even? n)
  (= (remainder n 2) 0))
(define (* a b)
  (cond ((= b 0) 0)
        ((even? b) (* (double a) (halve b)))
        (else (+ a (* a (- b 1))))
        )
  )

(assert_eq? 0  (* 2 0))
(assert_eq? 2 (* 2 1) )
(assert_eq? 4 (* 2 2))
(assert_eq? 6 (* 2 3))
(assert_eq? 8 (* 2 4))
(assert_eq? 10 (* 2 5))
(assert_eq? 12 (* 2 6))
(assert_eq? 14 (* 2 7))
(assert_eq? 16 (* 2 8))
(assert_eq? 18 (* 2 9))
(assert_eq? 20 (* 2 10))

;; Multiplication in logarithmic time and constant space(due to being iterative)
;; Like exponentiation, maintain acc + ab
;; if b = 0, acc
;; if even b, b <- b/2; a <- 2a
;; else , b <-  b-1; acc <- acc +a
(define (mult-iter a b acc)
    (cond ((= b 0) acc)
          ((even? b) (mult-iter (double a) (halve b) acc))
          (else (mult-iter a (- b 1) (+ acc a)))
          )
    )
(assert_eq? (mult-iter 2 0 0) (* 2 0))
(assert_eq? (mult-iter 2 1 0) (* 2 1))
(assert_eq? (mult-iter 2 2 0) (* 2 2))
(assert_eq? (mult-iter 2 3 0) (* 2 3))
(assert_eq? (mult-iter 2 4 0) (* 2 4))
(assert_eq? (mult-iter 2 5 0) (* 2 5))
(assert_eq? (mult-iter 2 6 0) (* 2 6))
(assert_eq? (mult-iter 2 7 0) (* 2 7))
(assert_eq? (mult-iter 2 8 0) (* 2 8))
(assert_eq? (mult-iter 2 9 0) (* 2 9))
(assert_eq? (mult-iter 2 10 0) (* 2 10))

#+END_SRC

#+RESULTS:

*** 1.19

+ Let the transformation $a,b \leftarrow a+b,a$ be $T$
+ Then $T^n$ gives us $a,b = fib(n+1),fib(n)$ starting with pair $(a,b) = (1,0)$
+ Let $T_{pq}$ be the transformation $a,b \leftarrow bq + aq + ap, bp+aq$ and

$$
Applying\ T_{pq}\ once
$$

$$
a_1,b_1 \leftarrow bq + aq + ap, bp+aq
$$

$$
Applying\ T_{pq}\ again
$$

$$
a_2,b_2 \leftarrow b_1q + a_1q + a_1p, b_1p+a_1q
$$

$$
a_2,b_2 \leftarrow (( bp + aq ) + ( bq + aq + ap ))q + ( bq + aq + ap )p, ( bp + aq )p + ( bq + aq + ap )q
$$

$$
a_2,b_2 \leftarrow ( b(p+q) + a(2q+p) )q + ( bq + a(q + p) )p, (bp+aq)p + (bq + a(q + p))q
$$

$$
a_2,b_2 \leftarrow ( b(p+q) + a(2q+p))q + ( bq + a(q + p) )p, bp^2 + apq + bq^2 + apq + aq^2
$$

$$
a_2,b_2 \leftarrow ( b(p+q) + a(2q+p))q + ( bq + a(q + p) )p, b(p^2+q^2) + a(2pq + q^2)
$$

$$
a_2,b_2 \leftarrow bpq + bq^2 + 2aq^2 + apq + bpq + apq + ap^2  , b2p^2 + a(2pq + q^2)
$$

$$
a_2,b_2 \leftarrow b(2qp + q^2) + a(2pq + q^2) + a(p^2 + q^2) , b2p^2 + a(2pq + q^2)
$$

$$
p', q' \leftarrow p^2 + q^2, 2pq+q^2
$$

#+BEGIN_SRC racket lang: racket

(define (fib n)
    (fib-iter 1 0 0 1 n))
(define (sq x) (* x x))
(define (fib-iter a b p q count)
  (cond ((= count 0) b)
        ((even? count)
         (fib-iter a
                   b
                   (+ (sq p) (sq q)); compute p ′
                   (+ (* 2 p q) (sq q)); compute q ′
                   (/ count 2)))
        (else (fib-iter (+ (* b q) (* a q) (* a p))
                        (+ (* b p) (* a q))
                        p
                        q
                        (- count 1)))))

#+END_SRC


*** 1.20

#+BEGIN_SRC racket :lang racket
(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))
;;Show the evaluation in normal order
;; Let rem = remainder
;; (gcd 206 40)
;; (gcd 40 (rem 206 40)) ;; (rem 206 40) gets evaluated for the condition check
;; (gcd (rem 206 40) (rem 40 (rem 206 40 ))) ;;
;; (gcd (rem 206 40) (rem 40 6)) ;; (rem 40 6) gets evaluated for condition check
;; (gcd  (rem 40 6) (rem (rem 206 40) (rem 40 6)))
;; (gcd  (rem 40 6) (rem 6 4)) ;; (rem 6 4) gets evaluated for condition check
;; (gcd  (rem 6 4) (rem (rem 40 6) (rem 6 4)))
;; (gcd  (rem 6 4) (rem 4 2))
;; (gcd  (rem 6 4) 0) ;; this evaluation done for condition check
;; (rem 6 4)
;; 2

;; So i guess rem is evaluated 10 times(?) in normal order evaluation


;; For applicative order evalution
;; (gcd 206 40)
;; (gcd 40 (rem 206 40))
;; (gcd 40 6)
;; (gcd 6 (rem 40 6))
;; (gcd 6 4)
;; (gcd 4 (rem 6 4))
;; (gcd 4 2)
;; (gcd 2 (rem 4 2))
;; (gcd 2 0)
;; 2

;; It get's called 4 times in applicative order
#+END_SRC

*** 1.21

#+NAME: prime_tests
#+BEGIN_SRC racket :lang racket
;; Non-probabilistic algorithm
(define (smallest-divisor n) (find-divisor n 2))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))
(define (divides? a b) (= (remainder b a) 0))

(define (prime? n)
  (= n (smallest-divisor n)))

;; Probabilistic algorithm based on Fermat's little theorem(known as fermat's primality test)
;; Fermat's little theorem states: for any a<p(prime), a^(p) ~==(congruent) a mod p
;;
;; NOTE: Euler's theorem(a^(phi(n)) ~== 1(mod n)) is a generalization of Fermat's little theorem
;; phi(n) is totient function(which counts the integers from 1 to n that are coprime to n)

(define (square x) (* x x))
(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder
          (square (expmod base (/ exp 2) m))
          m))
        (else
         (remainder
          (* base (expmod base (- exp 1) m))
          m))))
(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))

(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((fermat-test n) (fast-prime? n (- times 1)))
        (else false)))

#+END_SRC

#+RESULTS: prime_tests

#+BEGIN_SRC racket :lang racket :noweb eval
<<prime_tests>>
(displayln (smallest-divisor 199))
(displayln (smallest-divisor 1999))
(displayln (smallest-divisor 19999))
#+END_SRC

#+RESULTS:
: 199
: 1999
: 7

*** 1.22

#+BEGIN_SRC racket :lang racket :noweb eval
<<prime_tests>>
(define (runtime) (current-milliseconds))
(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))
(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (runtime) start-time))
      '()))
(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))
(define (search-for-primes n )
    (if (even? n) (search-for-primes (+ n 1))
        (if (prime? n) (begin ( timed-prime-test n ) n) (search-for-primes (+ n 1))
            )
        )
    )
(define ( search-for-x-primes-larger-than-n n x )
  (if (= x 0)
      (display "")
      (search-for-x-primes-larger-than-n (+ (search-for-primes (+ n 1)) 1) (- x 1))
      )
  )
(search-for-x-primes-larger-than-n 1000 3)
(newline)
(search-for-x-primes-larger-than-n 10000 3)
(newline)
(search-for-x-primes-larger-than-n 100000 3)
(newline)
(search-for-x-primes-larger-than-n 1000000 3)
#+END_SRC

#+RESULTS:
#+begin_example

1009 *** 0
1013 *** 0
1019 *** 0

10007 *** 0
10009 *** 0
10037 *** 0

100003 *** 0
100019 *** 0
100043 *** 0

1000003 *** 0
1000033 *** 0
1000037 *** 0
#+end_example

Can't seem to get runtime properly(?)

*** 1.23

Skipping this, it's kinda obvious

*** 1.24

#+BEGIN_SRC racket :lang racket :noweb eval
<<prime_tests>>
(define (runtime) (current-milliseconds))
(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))
(define (start-prime-test n start-time)
  (if (fast-prime? n 100)
      (report-prime (- (runtime) start-time))
      '()))
(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))
(timed-prime-test 1009 )
(timed-prime-test 1013 )
(timed-prime-test 1019 )
(timed-prime-test 10007 )
(timed-prime-test 10009 )
(timed-prime-test 10037 )
(timed-prime-test 100003 )
(timed-prime-test 100019 )
(timed-prime-test 100043 )
(timed-prime-test 1000003 )
(timed-prime-test 1000033 )
(timed-prime-test 1000037 )
#+END_SRC

#+RESULTS:
#+begin_example

1009 *** 0
1013 *** 0
1019 *** 0
10007 *** 0
10009 *** 0
10037 *** 0
100003 *** 0
100019 *** 0
100043 *** 0
1000003 *** 0
1000033 *** 0
1000037 *** 0
#+end_example

*** 1.25

Alyssa P. Hacker complains that we went to
a lot of extra work in writing ~expmod~. After all, she says,
since we already know how to compute exponentials, we
could have simply written
#+BEGIN_SRC racket
(define (expmod base exp m)
   (remainder (fast-expt base exp) m))
#+END_SRC
Is she correct? Would this procedure serve as well for our
fast prime tester? Explain.

ANS: If we use machine integers, the issue will be with overflow. We'll probably
end up getting different values for this expmod and the other one. Racket seems
to support big numbers, so they would give same answer at least. But the issue
is operations with large numbers are slow so it'll be slower but correct I
believe. The cost for operations on big numbers will probably overshadow the
cost of extra ~remainder~ operations that happen with the other implementation.

*** 1.26

#+BEGIN_SRC racket :lang racket
(define (expmod base exp m)
   (cond ((= exp 0) 1)
         ((even? exp)
            (remainder (* (expmod base (/ exp 2) m) (expmod base (/ exp 2) m)) m))
         (else
           (remainder (* base
                      (expmod base (- exp 1) m))
                      m))))
#+END_SRC

The issue is repeated calls to ~expmod~. This basically causes extra evaluations for the same thing.

The reason it's O(n) is because of the following :

Let the runtime be some function of n (f(n)). Then we just express what happens
in the function and it becomes obvious that it's O(n).

O(f(n))
=> O(f(n/2)) + O(f(n/2)) + O(1)
=> ( O(f(n/4)) + O(f(n/4)) + O(1) ) + ( O(f(n/4)) + O(f(n/4)) + O(1))
.
.
.
=> n*O(1)

There's ~Master theorem~ which can solve for recurrences like this.

If we see the original implementation, it's doing something like this:

O(f(n))
=> O(f(n/2)) + O(1)
=> O(f(n/4)) + O(1)
.
.
.
=> O(1)

We halve the problem at each step and in a very hand wavy way I'll just say this
is O(logn)

*** 1.27

#+BEGIN_SRC racket :lang racket :noweb eval
<<prime_tests>>

(displayln (fast-prime? 561 1000))
(displayln (fast-prime? 1105 1000))
(displayln (fast-prime? 1729 1000))
(displayln (fast-prime? 2465 1000))
(displayln (fast-prime? 2821 1000))
(displayln (fast-prime? 6601 1000))
#+END_SRC

#+RESULTS:
: #t
: #t
: #t
: #t
: #t
: #t

*** 1.28

This starts from an alternate form of Fermat’s Little Theorem, which states that
if n is a prime number and a is any positive integer less than n, then a raised
to the (n−1)-st power is congruent to 1 modulo n. To test the primality of a
number n by the Miller-Rabin test, we pick a random number a < n and raise a to
the (n − 1)st power modulo n using the expmod procedure. However, whenever we
perform the squaring step in expmod, we check to see if we have discovered a
“nontrivial square root of 1 modulo n,” that is, a number not equal to 1 or n−1
whose square is equal to 1 modulo n. It is possible to prove that if such a
nontrivial square root of 1 exists, then n is not prime. It is also possible to
prove that if n is an odd number that is not prime, then, for at least half the
numbers a < n, computing $a^{n−1}$ in this way will reveal a nontrivial square
root of 1 modulo n. (This is why the Miller-Rabin test cannot be fooled.) Modify
the expmod procedure to signal if it discovers a nontrivial square root of 1,
and use this to implement the Miller-Rabin test with a procedure analogous to
fermat-test. Check your procedure by testing various known primes and
non-primes. Hint: One convenient way to make expmod signal is to have it
return 0.

#+BEGIN_SRC racket :lang racket
;; Miller Rabin test(fermat test alternative but can't be fooled)
(define (square x) (* x x))
(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (let* ([y (expmod base (/ exp 2) m)] [y-sq (remainder ( square y ) m)])
           (if (and (= y-sq 1) (and (not (= y 1) ) (not (= y (- m 1)) )) )
               0
               y-sq
           )
         ))
        (else
         (remainder
          (* base (expmod base (- exp 1) m))
          m))))
(define (miller-rabin-test n)
  (define (try-it a)
    (= (expmod a (- n 1) n) 1))
  (try-it (+ 1 (random (- n 1)))))

(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((miller-rabin-test n) (fast-prime? n (- times 1)))
        (else false)))

(displayln (fast-prime? 561 1000))
(displayln (fast-prime? 1105 1000))
(displayln (fast-prime? 1729 1000))
(displayln (fast-prime? 2465 1000))
(displayln (fast-prime? 2821 1000))
(displayln (fast-prime? 6601 1000))
(displayln (fast-prime? 1000000007 1000))
(displayln (fast-prime? 1000000009 1000))
#+END_SRC

#+RESULTS:
: #f
: #f
: #f
: #f
: #f
: #f
: #t
: #t

*** 1.29

Simpson’s Rule is a more accurate method
of numerical integration than the method illustrated above.
Using Simpson’s Rule, the integral of a function f between
a and b is approximated as

$$
h/3 (y_0 + 4y_1 + 2y_2 + 4y_3 + 2y_4 + · · · + 2y_{n −2} + 4y_{n −1} + y_n ),\ h = (b-a)/n,\ y_k=f(a+kh)
$$

#+BEGIN_SRC racket :lang racket
(define (cube x) (* x x x))
(define (sum term a next b)
    (if (> a b)
        0
        (+ (term a)
           (sum term (next a) next b))))
(define (integral-approx f a b dx)
      (define (add-dx x)
        (+ x dx))
      (* (sum f (+ a (/ dx 2.0)) add-dx b)
         dx))

(define (simpson-integral-approx f a b n)
    (let ((h (/ (- b a) n))
          (coeff (lambda (k)
                   (cond ((or (= k 0) (= k n)) 1)
                         ((even? k) 2)
                         (else 4)
                         )))
          )
      (* (/ h 3) (sum
                  (lambda (k) (* (coeff k) (f (+ a (* k h)))))
                  0
                  (lambda (x) (+ x 1)) n))))
(displayln (integral-approx cube 0 1 0.01))
(displayln (integral-approx cube 0 1 0.001))
(displayln (simpson-integral-approx cube 0.0 1.0 100))
(displayln (simpson-integral-approx cube 0.0 1.0 1000))
#+END_SRC

#+RESULTS:
: 0.24998750000000042
: 0.249999875000001
: 0.24999999999999992
: 0.2500000000000003


*** 1.30

#+BEGIN_SRC racket :lang racket
(define (sum term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (+ (term a) result))))
  (iter a 0))
(displayln (sum (lambda (x) x) 0 (lambda (x) (+ x 1)) 10))
#+END_SRC

#+RESULTS:
: 55

*** 1.32

I'll write the iterative version directly

#+BEGIN_SRC racket :lang racket
(define (prod term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (* (term a) result)))
    )
  (iter a 1))
(define (factorial n)
  (prod (lambda (x) x) 1 (lambda (x) (+ x 1)) n)
  )
(displayln (factorial 10))
(displayln (factorial 6))


(define (pi-approx lim)
  (define (sq x) (* x x))
  (define (numerator x) ( * (+ (* 2.0 x) 2) (* 2.0 x)))
  (define (denom x) ( sq (+ (* 2.0 x) 1.0)))
  (* 4 (prod (lambda (x) ( / (numerator x) (denom x))) 1 (lambda (x) (+ x 1)) lim))
  )
(displayln (pi-approx 100))
(displayln (pi-approx 1000))
(displayln (pi-approx 10000))
#+END_SRC

#+RESULTS:
: 3628800
: 720
: 3.149378473168601
: 3.1423773650938855
: 3.1416711865345

*** 1.32 & 1.33

#+BEGIN_SRC racket :lang racket :noweb eval
<<prime_tests>>
<<assert>>
(define (accumulate combiner null-value term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (combiner (term a) result)))
    )
  (iter a null-value))
(define (factorial n)
  (accumulate * 1 (lambda (x) x) 1 (lambda (x) (+ x 1)) n)
  )
(define (sum n)
  (accumulate + 0 (lambda (x) x) 0 (lambda (x) (+ x 1)) n)
  )
(assert_eq? (factorial 10) 3628800)
(assert_eq? (factorial 6) 720)

(assert_eq? (sum 10) 55)

(define (filtered-accumulate pred combiner null-value term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (combiner ((lambda (x) ( if (pred x) x null-value)) (term a)) result))
    ))
  (iter a null-value))

(define (sum-pred pred n)
  (filtered-accumulate pred + 0 (lambda (x) x) 0 (lambda (x) (+ x 1)) n)
  )
(assert_eq? (sum-pred even? 3) 2)
(assert_eq? (sum-pred even? 5) 6)

(define (sum-of-sq-of-primes n)
  (filtered-accumulate
   prime?
   (lambda (x acc) ( + (* x x) acc))
   0
   (lambda (x) x)
   2
   (lambda (x) (+ x 1)) n)
  )

(assert_eq? (sum-of-sq-of-primes 5) 38) ;; 2^2 + 3^2 + 5^2 = 38

(define (gcd a b) (if (= b 0) a (gcd b (remainder a b))))
(define (prod-of-pos-num-less-than-n-coprime-to-n n)
  (filtered-accumulate
   (lambda (x) (= (gcd n x) 1)) ;; definition of relatively prime
   *
   1
   (lambda (x) x)
   1
   (lambda (x) (+ x 1)) n)
  )

(assert_eq? (prod-of-pos-num-less-than-n-coprime-to-n 5) 24) ;; 1*2*3*4
(assert_eq? (prod-of-pos-num-less-than-n-coprime-to-n 6) 5) ;; 1*5
#+END_SRC

#+RESULTS:

*** 1.34

#+BEGIN_SRC racket :lang racket
(define (f g) (g 2))
;; (f f) => (f 2) => (2 2) which doesn't make sense
#+END_SRC

#+RESULTS:

*** 1.35

Show that the golden ratio ϕ (Section 1.2.2)
is a ﬁxed point of the transformation x → 1 + 1/x , and
use this fact to compute ϕ by means of the fixed-point
procedure.

$$
x^2 - x - 1 = 0 (ϕ is a solution of this)
$$

$$
x^2 = x + 1
$$

$$
x = 1 + 1/x
$$

proved..

#+BEGIN_SRC racket :lang racket
(define tolerance 0.00001)
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))
(displayln (fixed-point (lambda (x) (+ 1 (/ 1.0 x))) 1.0))
#+END_SRC


*** 1.36

#+begin_src racket :lang racket
(define tolerance 0.00001)
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (displayln guess)
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))
(displayln "Approximating with fixed-point(no average dampening)")
(displayln (fixed-point (lambda (x) (/ (log 1000) (log x))) 100.0))
(displayln "================================")

(displayln "Approximating with fixed-point(with average dampening)")
(define (average x y) (/ (+ x y) 2.0))
(displayln (fixed-point (lambda (x) (average x ( / (log 1000) (log x)))) 100.0))
(displayln "================================")
#+end_src

#+RESULTS:
#+begin_example
Approximating with fixed-point(no average dampening)
100.0
1.4999999999999998
17.036620761802723
2.4362841528268704
7.757391404878408
3.3718636013068974
5.683217478018266
3.97564638093712
5.004940305230897
4.2893976408423535
4.743860707684508
4.437003894526853
4.6361416205906485
4.503444951269147
4.590350549476868
4.532777517802648
4.570631779772813
4.545618222336422
4.562092653795064
4.551218723744055
4.558385805707352
4.553657479516671
4.55677495241968
4.554718702465183
4.556074615314888
4.555180352768613
4.555770074687025
4.555381152108018
4.555637634081652
4.555468486740348
4.555580035270157
4.555506470667713
4.555554984963888
4.5555229906097905
4.555544090254035
4.555530175417048
4.555539351985717
================================
Approximating with fixed-point(with average dampening)
100.0
50.75
26.254540457118523
14.184200419676754
8.394404144501411
5.820596485719324
4.871165879985272
4.6169793776123935
4.566308737263073
4.557379626448907
4.555849935202987
4.555589214071988
4.555544815820955
4.555537256371145
================================
#+end_example

Approximation with average dampening takes significantly less number of steps

*** 1.37 & 1.38 & 1.39

#+begin_src racket :lang racket
(define (cont-frac-rec n d k)
  (define (f i)
    (if (= i k)
        (/ (n k) (d k))
        (/ (n i) (+ (d i) (f (+ i 1)))))
    )
  (f 1)
  )
;; Do it bottom up to make it iterative
(define (cont-frac n d k)
  (define (f i acc)
    (if (= i 1)
        (/ (n 1) (+ (d 1) acc))
        (f (- i 1) (/ (n i) (+ (d i) acc))))
    )
  (f k 0.0)
  )
(define (phi-reciprocal-with-k-approx k)
  (cont-frac (lambda (i) 1.0)
             (lambda (i) 1.0)
             k)
  )
;;(cont-frac (lambda (i) 1.0)
;;           (lambda (i) 1.0)
;;           k), such that approximation of 1/ϕ is accurate upto 4 decimal places

(displayln (phi-reciprocal-with-k-approx 1))
(displayln (phi-reciprocal-with-k-approx 10000))
(define (good-enough? k)
  (let ((value (phi-reciprocal-with-k-approx k)))
    (> (- value 0.6180) 0.00001))
  )
;; binary search on the answer
(define (get-k l r)
  (let ((mid (exact-floor (/ (+ l r) 2) )))
    (if (= (- r l) 1)
        r
        (if (good-enough? mid) (get-k l mid) (get-k mid r)))
  ))
(define k (get-k 1 10000))
(displayln k)
(displayln (phi-reciprocal-with-k-approx k))
(displayln (phi-reciprocal-with-k-approx (- k 1)))
;; 1/ϕ = 0.618033


;; 1.38
;; approximate e-2
;; Ni = 1
;; Di = 1, 2, 1, 1, 4, 1, 1, 6, 1, 1, 8, 1 ...
;; Di = if (i of form 3*x-1) then 2*x else 1

(define (d-i i)
  (if (= (remainder (+ i 1) 3) 0)
        (* 2.0 (/ (+ i 1) 3))
        1.0
        )
  )
(displayln (list (d-i 1) (d-i 2) (d-i 3) (d-i 4) (d-i 5) (d-i 6) (d-i 7) (d-i 8)))
(define (n-i i) 1.0)
(define (e-2-approx k)
  (cont-frac n-i
             d-i
             k)
  )
(display "e-2 approximation:")
(define tries 100)
(displayln (e-2-approx tries))

;; approximation for tanx(x in radians)

(define (tan-cf x k)
  (cont-frac (lambda (i) (if (= i 1) x (- (* x x))))
             (lambda (i) (- (* 2 i) 1))
             k)
  )

(display "tan(2.0) approximation:")
(displayln (tan-cf 2.0 100))
(display "tan(3.0) approximation:")
(displayln (tan-cf 3.0 100))

#+end_src


#+RESULTS:
: 1.0
: 0.6180339887498948
: 11
: 0.6180555555555556
: 0.6179775280898876
: (1.0 2.0 1.0 1.0 4.0 1.0 1.0 6.0)
: e-2 approximation:0.7182818284590453
: tan(2.0) approximation:-2.185039863261519
: tan(3.0) approximation:-0.14254654307427775

The value for k is 11

*** 1.40

#+name: approximations
#+begin_src racket :lang racket
(define ( average x y ) (/ (+ x y) 2.0))
(define (average-damp f)
      (lambda (x) (average x (f x))))
(define (deriv g)
      (lambda (x) (/ (- (g (+ x dx)) (g x)) dx)))
(define dx 0.00001)
(define (newton-transform g)
      (lambda (x) (- x (/ (g x) ((deriv g) x)))))
(define (newtons-method g guess)
      (fixed-point (newton-transform g) guess))

(define tolerance 0.00001)
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (displayln guess)
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))

(define (cubic a b c)
    (lambda (x) (+ (* x x x) (* a x x) (* b x) c))
)
;; (newtons-method (cubic a b c) 1) should work now
#+end_src

#+RESULTS:

*** 1.41

#+begin_src racket :lang racket :noweb eval
<<assert>>
(define (double f)
   (lambda (x) (f (f x)))
)
(define (inc x) (+ x 1))
(assert_eq? ((double inc) 5) 7)
(assert_eq? (((double double ) inc) 5) 9)

;;(((double (double double)) inc) 5)
;;((double ( lambda x -> double (double x) )))
;;((double g)) ;; where g = lambda x -> (double (double x))
;;((( lambda x -> g (g x))))
;; (g (g inc))
;; (g (double (double inc)))
;; (g (double (double inc)))
;; (double (double (double (double inc))))
;; (double (double (double (double inc))))
;; 16 inc

(assert_eq? (((double (double double)) inc) 5) (+ 5 16))
#+end_src

#+RESULTS:

*** 1.42

#+begin_src racket :lang racket :noweb eval
<<assert>>
(define (compose f g) (lambda (x) (f (g x))))
(assert_eq? ((compose (lambda (x) (* x x)) (lambda (x) (+ x 1))) 6) 49)
#+end_src

#+RESULTS:

*** 1.43

#+begin_src racket :lang racket :noweb eval
<<assert>>
(define (compose f g) (lambda (x) (f (g x))))
(define (repeated f n)
   (define (h new-f i) (if (= i n) new-f (h (compose f new-f) (+ i 1)) ) )
   (h f 1)
)
(define (sq x) (* x x))
(assert_eq? ((repeated sq 2) 5) 625)
(assert_eq? ((repeated (lambda (x) (* x x)) 1) 3) 9)
(assert_eq? ((repeated (lambda (x) (* x x)) 2) 3) 81)
(assert_eq? ((repeated (lambda (x) (* x x)) 3) 3) 6561)
#+end_src

#+RESULTS:

*** 1.44

#+begin_src racket :lang racket :noweb eval
<<approximations>>
(define (compose f g) (lambda (x) (f (g x))))
(define (repeated f n)
   (define (h new-f i) (if (= i n) new-f (h (compose f new-f) (+ i 1)) ) )
   (h f 1)
)

(define (smooth f)
   (lambda (x) ( / (+ (f (+ x dx)) (f x) (f (- x dx))) 3.0))
)

(define (nth-fold-smooth n)
      (repeated smooth n)
)
#+end_src

#+RESULTS:

*** 1.45 & 1.46

Skipping this.. I can do it but do not want to.
